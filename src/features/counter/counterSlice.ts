import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchCount } from "./counterAPI";
import {
  certaintyQuotes,
  exchangeRates,
  currencies,
  me,
  salviati,
  federigo,
  piero,
  you,
  tomasso,
} from "./initialState";

type Obj = {
  [index: string]: any;
};
interface Trader {
  id: string;
  city: string;
  assets: any;
  liabilities: any;
  coins: any;
  goods?: number;
}
export interface CounterState {
  // certaintyQuotes: Obj;
  // exchangeRates: Obj;
  // currencies: Obj;
  me: Trader;
  salviati: Trader;
  federigo: Trader;
  piero: Trader;
  you: Trader;
  tomasso: Trader;
}

const initialState: CounterState = {
  // certaintyQuotes,
  // exchangeRates,
  // currencies,
  me,
  salviati,
  federigo,
  piero,
  you,
  tomasso,
};
type ObjectKey = keyof typeof initialState
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: "actors",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateActors: (state, { payload }) => {
      const importerId = payload.importer.id as ObjectKey
      console.log(JSON.stringify(state[importerId]))

      // const id: string = "salviati"
      // console.log(JSON.stringify(state[id]))
      // const bill = {
      //   id: new Date().toISOString(),
      //   dueTo: exporter.id,
      //   dueFrom: importer.id,
      //   city: importer.city,
      //   amount: amount,
      //   paid: false,
      // };

      // console.log(state[importer.id])
      // importer.goods += payload.amount;
      // exporter.goods -= payload.amount;
      // importer.liabilities = [...payload.importer.liabilities, bill];
      // exporter.assets = [...payload.exporter.assets, bill];
    },
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // state.value += 1;
    },
    decrement: (state) => {
      // state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      // state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        // state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        // state.status = "idle";
        // state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        // state.status = "failed";
      });
  },
});

export const { increment, updateActors, decrement, incrementByAmount } =
  counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectState = (state: RootState) => state.counter;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default counterSlice.reducer;
